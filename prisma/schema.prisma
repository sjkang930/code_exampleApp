// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures=["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  code          String    @db.Text
  language      String
  totalComments Int       @default(0)
  totalLikes    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  liked         Boolean   @default(false)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  comments      Comment[]
  likes         Like[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String?   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  liked     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String  @unique
  user      User?    @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
}